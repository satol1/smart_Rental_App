import os
import json
import fnmatch
from pathlib import Path
from collections import defaultdict
import re

# --- –û–ë–©–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
project_root = Path(__file__).resolve().parent
output_filename = project_root / "smart_project_summary.md"

# 1. –ß–¢–û –í–ö–õ–Æ–ß–ê–ï–ú –í –°–ë–û–†–ö–£
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
INCLUDE_DIRS = {
    "RentalApp_FASTAPI",
    "rental-app-main",
    "nginx"
}
# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
INCLUDE_FILES_IN_ROOT = {
    "docker-compose.yml",
    ".env"
}
# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å
INCLUDE_EXTENSIONS = {
    ".py", ".tsx", ".ts", ".js", ".css", ".json", ".conf", ".yml", ".md"
}
# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
ALWAYS_INCLUDE_FILENAMES = {
    "Dockerfile.backend",
    "Dockerfile.frontend"
}
# –§–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
LIGHTWEIGHT_EXTENSIONS = {".svg"}


# 2. –ß–¢–û –ò–°–ö–õ–Æ–ß–ê–ï–ú –ò–ó –°–ë–û–†–ö–ò
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
EXCLUDE_DIRS = {
    '.git', '.venv', '__pycache__', 'node_modules',
    '.idea', '.vscode', 'dist', 'build'
}
# –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–∞—Å–∫–µ
EXCLUDE_FILES = {
    '*.pyc', '*.pyo', '*.db', '*.sql', 'package-lock.json'
}

def collect_files_to_include():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç."""
    included_files = []
    for root, dirs, files in os.walk(project_root, topdown=True):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ö–æ–¥–∞
        dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS]

        current_dir_path = Path(root)

        for file in files:
            file_path = current_dir_path / file
            relative_path = file_path.relative_to(project_root)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            if any(part in EXCLUDE_DIRS for part in relative_path.parts):
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –º–∞—Å–∫–µ
            if any(fnmatch.fnmatch(file, pattern) for pattern in EXCLUDE_FILES):
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
            is_in_included_dir = any(relative_path.parts[0] == d for d in INCLUDE_DIRS)
            is_root_file = relative_path.parent.name == '' and file in INCLUDE_FILES_IN_ROOT
            has_valid_extension = file_path.suffix in INCLUDE_EXTENSIONS or file_path.suffix in LIGHTWEIGHT_EXTENSIONS
            is_always_included = file in ALWAYS_INCLUDE_FILENAMES

            if is_in_included_dir or is_root_file:
                if has_valid_extension or is_always_included:
                    included_files.append(file_path)

    return sorted(included_files, key=lambda p: str(p.relative_to(project_root)))


def generate_tree_structure(included_files):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    tree = defaultdict(list)
    for path in included_files:
        rel_path = path.relative_to(project_root)
        parent_str = str(rel_path.parent)
        # –î–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        parent_key = parent_str if parent_str != '.' else '/'
        tree[parent_key].append(rel_path)

    lines = ["# üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∏–µ—Ä–∞—Ä—Ö–∏—è)"]

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
    root_files = sorted(tree.get('/', []))
    lines.append(f"`{project_root.name}/`")

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
    def build_tree(folder: str, prefix: str = ""):
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        subfolders = sorted([d for d in tree if Path(d).parent == Path(folder) and d != folder])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        for i, subfolder in enumerate(subfolders):
            is_last_subfolder = (i == len(subfolders) - 1)
            lines.append(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last_subfolder else '‚îú‚îÄ‚îÄ '}`{Path(subfolder).name}/`")
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∞–ø–∫–∏
            folder_files = sorted(tree.get(subfolder, []))
            for j, file_path in enumerate(folder_files):
                is_last_file = (j == len(folder_files) - 1)
                file_prefix = prefix + ('    ' if is_last_subfolder else '‚îÇ   ')
                icon = "üìÑ"
                if file_path.suffix in LIGHTWEIGHT_EXTENSIONS: icon = "üñºÔ∏è"
                if file_path.name.lower().startswith('docker'): icon = "üê≥"
                lines.append(f"{file_prefix}{'‚îî‚îÄ‚îÄ ' if is_last_file else '‚îú‚îÄ‚îÄ '}{icon} `{file_path.name}`")

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
            build_tree(subfolder, prefix + ('    ' if is_last_subfolder else '‚îÇ   '))

    # –í—ã–≤–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for i, file_path in enumerate(root_files):
        is_last = i == len(root_files) - 1 and all(p.parts[0] not in tree for p in included_files if len(p.parts) > 1)
        icon = "üìÑ"
        if "docker-compose" in file_path.name: icon = "üê≥"
        if ".env" in file_path.name: icon = "ü§´"
        lines.append(f"‚îú‚îÄ‚îÄ {icon} `{file_path.name}`")

    # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    included_root_dirs = sorted(list(INCLUDE_DIRS))
    for i, root_dir in enumerate(included_root_dirs):
        is_last_root = i == len(included_root_dirs) - 1
        lines.append(f"{'‚îî‚îÄ‚îÄ ' if is_last_root else '‚îú‚îÄ‚îÄ '}`{root_dir}/`")
        build_tree(root_dir, '    ' if is_last_root else '‚îÇ   ')

    return "\n".join(lines)


def write_output_file(included_files):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∏—Ç–æ–≥–æ–≤—ã–π markdown —Ñ–∞–π–ª."""
    with open(output_filename, "w", encoding="utf-8") as out:
        out.write("# ü§ñ –°–∂–∞—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞\n\n")

        # --- –°–µ–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
        out.write("## üîó –ë—ã—Å—Ç—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–∞–º\n")
        for path in included_files:
            rel_path_str = path.relative_to(project_root).as_posix()
            anchor = re.sub(r'[^a-zA-Z0-9]', '', rel_path_str)
            out.write(f"- [{rel_path_str}](#{anchor})\n")
        out.write("\n---\n\n")

        # --- –°–µ–∫—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
        structure = generate_tree_structure(included_files)
        out.write(structure)
        out.write("\n\n---\n")

        # --- –°–µ–∫—Ü–∏—è —Å –∫–æ–¥–æ–º ---
        for path in included_files:
            rel_path = path.relative_to(project_root)
            rel_path_str = rel_path.as_posix()
            anchor = re.sub(r'[^a-zA-Z0-9]', '', rel_path_str)
            out.write(f'\n\n## <a name="{anchor}"></a>`{rel_path_str}`\n\n')

            if path.suffix in LIGHTWEIGHT_EXTENSIONS:
                out.write(f"```\n[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ SVG —Ñ–∞–π–ª–∞ '{path.name}' –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞]\n```\n")
                continue

            lang_map = {
                '.py': 'python', '.tsx': 'tsx', '.ts': 'typescript',
                '.css': 'css', '.js': 'javascript', '.json': 'json',
                '.yml': 'yaml', '.conf': 'nginx', '.md': 'markdown'
            }
            lang = lang_map.get(path.suffix, '')
            if path.name.lower().startswith('dockerfile'):
                lang = 'dockerfile'

            block = [f"```{lang}"]
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É –¥–ª—è AI
                block.insert(1, f"// path: {rel_path_str}\n")
                content = path.read_text(encoding="utf-8")
                block.append(content)
            except Exception as e:
                block.append(f"# –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            block.append("\n```\n")
            out.write("\n".join(block))

        # --- –°–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
        out.write("\n\n## üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n")
        # Frontend
        pkg_path = project_root / "rental-app-main" / "package.json"
        if pkg_path.exists():
            try:
                pkg_data = json.loads(pkg_path.read_text(encoding="utf-8"))
                deps = pkg_data.get("dependencies", {})
                dev_deps = pkg_data.get("devDependencies", {})
                out.write("\n### Frontend (package.json)\n\n")
                if deps:
                    for name, version in sorted(deps.items()):
                        out.write(f"- `{name}`: {version}\n")
                if dev_deps:
                    out.write("\n#### Dev-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n")
                    for name, version in sorted(dev_deps.items()):
                        out.write(f"- `{name}`: {version}\n")
            except Exception as e:
                out.write(f"\n\n## –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}\n")

        # Backend
        req_path = project_root / "RentalApp_FASTAPI" / "requirements.txt"
        if req_path.exists():
            try:
                out.write("\n### Backend (requirements.txt)\n\n")
                out.write("```txt\n")
                out.write(req_path.read_text(encoding="utf-8"))
                out.write("\n```\n")
            except Exception as e:
                out.write(f"\n\n## –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("ü§ñ –°–æ–±–∏—Ä–∞—é –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è AI-–ø–æ–º–æ—â–Ω–∏–∫–∞...")
    included_files = collect_files_to_include()
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(included_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–±–æ—Ä–∫—É.")
    write_output_file(included_files)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª '{output_filename.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ—Ä–Ω–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")


if __name__ == "__main__":
    main()