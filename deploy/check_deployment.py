#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º.
"""

import asyncio
import sys
import os
from sqlalchemy import select, func

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∏–º–ø–æ—Ä—Ç—ã
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'RentalApp_FASTAPI'))

from containers import AsyncSessionLocal
from api.models.user import User
from api.models.equipment import Equipment
from api.models.brand_system import BrandSystem
from api.models.accessory import Accessory

async def check_deployment_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    print("=" * 60)
    
    db_session = AsyncSessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_result = await db_session.execute(
            select(User).filter(User.role == "admin")
        )
        admins = admin_result.scalars().all()
        
        print(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(admins)}")
        for admin in admins:
            print(f"  - {admin.full_name} ({admin.email}) - {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if admin.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        equipment_result = await db_session.execute(
            select(func.count(Equipment.id))
        )
        equipment_count = equipment_result.scalar_one()
        
        print(f"\nüì∑ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_count} –µ–¥–∏–Ω–∏—Ü")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        type_result = await db_session.execute(
            select(Equipment.equipment_type, func.count(Equipment.id))
            .group_by(Equipment.equipment_type)
        )
        type_stats = type_result.all()
        
        for equipment_type, count in type_stats:
            print(f"  - {equipment_type}: {count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—ã –±—Ä–µ–Ω–¥–æ–≤
        brand_system_result = await db_session.execute(
            select(func.count(BrandSystem.id))
        )
        brand_system_count = brand_system_result.scalar_one()
        
        print(f"\nüè∑Ô∏è  –°–∏—Å—Ç–µ–º—ã –±—Ä–µ–Ω–¥–æ–≤: {brand_system_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
        accessory_result = await db_session.execute(
            select(func.count(Accessory.id))
        )
        accessory_count = accessory_result.scalar_one()
        
        print(f"\nüéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: {accessory_count}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        accessory_type_result = await db_session.execute(
            select(Accessory.accessory_type, func.count(Accessory.id))
            .group_by(Accessory.accessory_type)
        )
        accessory_type_stats = accessory_type_result.all()
        
        for accessory_type, count in accessory_type_stats:
            print(f"  - {accessory_type}: {count}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(admins)}")
        print(f"  üì∑ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_count}")
        print(f"  üè∑Ô∏è  –°–∏—Å—Ç–µ–º—ã –±—Ä–µ–Ω–¥–æ–≤: {brand_system_count}")
        print(f"  üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: {accessory_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        if len(admins) > 0 and equipment_count > 0:
            print(f"\n‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print(f"üîë –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã—à–µ")
        else:
            print(f"\n‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–í–ï–†–ù–£–¢–ê")
            if len(admins) == 0:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –∑–∞–ø—É—Å—Ç–∏—Ç–µ create_admin.py")
            if equipment_count == 0:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ seed_equipment_data.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
    finally:
        await db_session.close()

if __name__ == "__main__":
    asyncio.run(check_deployment_status())
